@use 'sass:map';
@use 'sass:math';

@import '~bootstrap/scss/vendor/rfs';

/**
 * For anti-aliasing light text on dark backgrounds
 */
@mixin antialias-text($arguments: antialiased) {
	-webkit-font-smoothing: $arguments;
	-moz-font-smoothing: $arguments;
	-ms-font-smoothing: $arguments;
}

/**
 * Custom Grid Mixins
 */
@mixin make-max-width-container($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
	@include make-container();

	@each $breakpoint in map.keys($breakpoints) {
		$max-width: map.get($max-widths, $breakpoint);

		@if ($max-width) {
			@include media-breakpoint-up($breakpoint, $breakpoints) {
				max-width: $max-width;
			}
		}
	}
}

/**
 * Break element out of bootstrap container
 */
@mixin break-out-container() {
	width: 100vw;
	position: relative;
	left: calc(-1 * (100vw - 100%) / 2);

	.editor-styles-wrapper & {
		width: 100%;
		left: auto;
	}

	@content;
}

/**
 * Make CSS grid
 */
@mixin make-grid($columns: $grid-columns, $rows: $grid-row-columns, $gap: false) {
	display: grid;
	grid-template-columns: repeat($columns, minmax(0, 1fr));
	grid-template-rows: repeat($rows, minmax(0, 1fr));

	@if $gap {
		gap: $gap;
	}

	@else {
		gap: $grid-gutter-width-sm;

		@include media-breakpoint-up(md) {
			gap: $grid-gutter-width;
		}
	}
}

/**
 * Make CSS auto grid
 */
@mixin make-auto-grid($columns: $grid-columns, $min-width: 300px, $gap: false) {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax($min-width, math.div(1, $columns) * 1fr));
	grid-template-rows: auto;
	justify-content: center;

	@if $gap {
		gap: $gap;
	}

	@else {
		gap: $grid-gutter-width-sm;

		@include media-breakpoint-up(md) {
			gap: $grid-gutter-width;
		}
	}
}

/**
 * Add grid breakpoints as pseudo content
 */
@mixin grid-breakpoints-content($position: before, $breakpoints: $grid-breakpoints) {
	&::#{$position} {
		@each $key in map.keys($breakpoints) {
			@include media-breakpoint-up($key) {
				content: '#{$key}';
			}
		}
	}
}

/**
 * For adding font icons to elements using CSS pseudo-elements
 */
@mixin add-icon($position: before, $icon: false, $spin: false, $styles: true) {
	@if $position == both {
		$position: 'before, &:after';
	}

	&:#{$position} {
		@if $icon {
			$code: map.get($icons, $icon);

			content: unquote('\'\\#{ $code }\'');
		}

		@else {
			position: relative;
			opacity: 1;
			height: auto;
			top: auto;
			left: auto;
			right: auto;
		}

		@if $styles {
			@extend .icon;
		}

		@if $spin {
			@extend .icon-spinner;
		}

		@content;
	}
}

/**
 * Fancy underline text-decoration
 */
@mixin add-text-underline($hover: false, $width: .09em, $link: $body-color, $line: $link-color) {
	position: relative;
	color: $link;
	text-decoration: none;

	&::before {
		content: '';
		position: absolute;
		top: calc(100% - #{$width});
		left: 0;
		width: 100%;
		display: block;
		height: $width;
		min-height: 1px;
		background: $line;
		transform-origin: bottom right;
		transition: $transition-base;

		@if $hover {
			transform: scaleX(0);
		}

		@else {
			transform: scaleX(1);
		}
	}

	&:hover,
	&:focus,
	&.active {
		color: $link;
		text-decoration: none;

		&::before {
			transform-origin: bottom left;

			@if $hover {
				transform: scaleX(1);
			}

			@else {
				transform: scaleX(0);
			}
		}
	}

	@content;
}
